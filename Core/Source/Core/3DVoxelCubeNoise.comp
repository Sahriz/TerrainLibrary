#version 430 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer noiseBuffer{
	float noiseMap[];
};

layout(std430, binding = 1) buffer SplineBuffer{
	vec2 splinePoints[];
};

uniform int width;
uniform int height;
uniform int depth;
uniform vec3 offset;

uniform float frequency;
uniform bool useHeightDropoff;

uniform int splinePointsCount;


float sampleCurve(float noiseValue) {
    if (noiseValue <= splinePoints[0].x)
        return splinePoints[0].y;

    uint last = uint(splinePointsCount - 1);
    if (noiseValue >= splinePoints[last].x)
        return splinePoints[last].y;

    for (uint i = 0; i < last; i++) {
        if (noiseValue >= splinePoints[i].x && noiseValue < splinePoints[i+1].x) {
            float t = (noiseValue - splinePoints[i].x) /
                      (splinePoints[i+1].x - splinePoints[i].x);
            return mix(splinePoints[i].y, splinePoints[i+1].y, t);
        }
    }
    return splinePoints[last].y;
}

vec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}
vec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}
vec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }

float snoise(vec2 v){
  const vec4 C = vec4(0.211324865405187, 0.366025403784439,
           -0.577350269189626, 0.024390243902439);
  vec2 i  = floor(v + dot(v, C.yy) );
  vec2 x0 = v -   i + dot(i, C.xx);
  vec2 i1;
  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);
  vec4 x12 = x0.xyxy + C.xxzz;
  x12.xy -= i1;
  i = mod(i, 289.0);
  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))
  + i.x + vec3(0.0, i1.x, 1.0 ));
  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),
    dot(x12.zw,x12.zw)), 0.0);
  m = m*m ;
  m = m*m ;
  vec3 x = 2.0 * fract(p * C.www) - 1.0;
  vec3 h = abs(x) - 0.5;
  vec3 ox = floor(x + 0.5);
  vec3 a0 = x - ox;
  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );
  vec3 g;
  g.x  = a0.x  * x0.x  + h.x  * x0.y;
  g.yz = a0.yz * x12.xz + h.yz * x12.yw;
  return 130.0 * dot(m, g);
}
float snoise(vec3 v){ 
  const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
  const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

// First corner
  vec3 i  = floor(v + dot(v, C.yyy) );
  vec3 x0 =   v - i + dot(i, C.xxx) ;

// Other corners
  vec3 g = step(x0.yzx, x0.xyz);
  vec3 l = 1.0 - g;
  vec3 i1 = min( g.xyz, l.zxy );
  vec3 i2 = max( g.xyz, l.zxy );

  //  x0 = x0 - 0. + 0.0 * C 
  vec3 x1 = x0 - i1 + 1.0 * C.xxx;
  vec3 x2 = x0 - i2 + 2.0 * C.xxx;
  vec3 x3 = x0 - 1. + 3.0 * C.xxx;

// Permutations
  i = mod(i, 289.0 ); 
  vec4 p = permute( permute( permute( 
             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
           + i.y + vec4(0.0, i1.y, i2.y, 1.0 )) 
           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

// Gradients
// ( N*N points uniformly over a square, mapped onto an octahedron.)
  float n_ = 1.0/7.0; // N=7
  vec3  ns = n_ * D.wyz - D.xzx;

  vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)

  vec4 x_ = floor(j * ns.z);
  vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

  vec4 x = x_ *ns.x + ns.yyyy;
  vec4 y = y_ *ns.x + ns.yyyy;
  vec4 h = 1.0 - abs(x) - abs(y);

  vec4 b0 = vec4( x.xy, y.xy );
  vec4 b1 = vec4( x.zw, y.zw );

  vec4 s0 = floor(b0)*2.0 + 1.0;
  vec4 s1 = floor(b1)*2.0 + 1.0;
  vec4 sh = -step(h, vec4(0.0));

  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

  vec3 p0 = vec3(a0.xy,h.x);
  vec3 p1 = vec3(a0.zw,h.y);
  vec3 p2 = vec3(a1.xy,h.z);
  vec3 p3 = vec3(a1.zw,h.w);

//Normalise gradients
  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
  p0 *= norm.x;
  p1 *= norm.y;
  p2 *= norm.z;
  p3 *= norm.w;

// Mix final noise value
  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
  m = m * m;
  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1), 
                                dot(p2,x2), dot(p3,x3) ) );
}

void main(){
	uint xPos = gl_GlobalInvocationID.x;
	uint yPos = gl_GlobalInvocationID.y;
	uint zPos = gl_GlobalInvocationID.z;
	
	if(xPos >= uint(width) || yPos >= uint(height) || zPos >= uint(depth)) return;
	

	//vec3 position = vec3(float(xPos), float(yPos), float(zPos));
	vec3 position = vec3((int(xPos) + offset.x)/float(width), (int(yPos) + offset.y)/float(height),(int(zPos) + offset.z)/float(depth));
	vec3 uniformPosition = position;
	uniformPosition.y *= float(width);
	vec2 planePosition = position.xz;
	float heightMap = snoise(planePosition * frequency * 0.1);
	heightMap = (heightMap + 0.9) / (2.0 * 0.9);
	
	float splineSample = sampleCurve(heightMap);
	
	
	
	
	float t = float(yPos) / float(height);
	float heightValue = 1/t * heightMap;
	float terrainValue = snoise(position * frequency) ;
	terrainValue = (terrainValue + 0.9) / (2.0 * 0.9) * (splineSample);
	if(useHeightDropoff){
		float falloffBase = (1.0 / (1.0 + exp((t - 0.5) * 7.0))) * 2.0 - 1.0;
		terrainValue += falloffBase;
	}

	float cheeseCavesNoise = snoise((uniformPosition + vec3(-723.0, 409.0, 122.0))*frequency*0.1);
	float q = 1.0 - t;
	float cheeseCaves = cheeseCavesNoise * pow(q,1.0);
	
	vec3 seed1 = vec3(100.0, 200.0, 300.0);
	vec3 seed2 = vec3(-300.0, 500.0, 700.0);
	vec3 seed3 = vec3(270.0, -139.0, -568.0);
	
	

	float caveStringValue1 = snoise((uniformPosition + seed1)* frequency * 1.7) * pow(q,0.5);
	float caveStringValue2 = snoise((uniformPosition + seed2) * frequency * 1.7) * pow(q,0.5);
	float caveStringValue3 = snoise((uniformPosition + seed3) * frequency * 1.7) * pow(q,0.5);

	float threshHold = 0.05;

	float combinedCaveString = (abs(caveStringValue1) < threshHold && abs(caveStringValue2) < threshHold)
								|| (abs(caveStringValue1) < threshHold && abs(caveStringValue3) < threshHold) 
								|| (abs(caveStringValue2) < threshHold && abs(caveStringValue3) < threshHold) ? -5.0 : 0.0;
	uint index = xPos + yPos * uint(width) + zPos * uint(width) * uint(height);
	noiseMap[index] = terrainValue + combinedCaveString;
}