#version 430 core

layout(local_size_x = 64) in;

layout(std430, binding = 0) buffer VertexBuffer {
    float positions[];
};

layout(std430, binding = 1) buffer normalBuffer {
	float normals[];
};

uniform int width;
uniform int height;

vec3 getPos(uint index) {
    uint i = index * 3;
    return vec3(positions[i], positions[i + 1], positions[i + 2]);
}

void setNormal(uint index, vec3 n) {
    uint i = index * 3;
    normals[i]     = n.x;
    normals[i + 1] = n.y;
    normals[i + 2] = n.z;
}

void main(){

	uint vertexIndex = gl_GlobalInvocationID.x;
	if(vertexIndex >= uint((width+1) * (height+1))) return;

	uint x = vertexIndex % uint(width+1);
	uint z = vertexIndex / uint(width+1);

	//Bottom Left corner
	if(x== 0 && z == 0) {
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex+1);
		vec3 v2 = getPos(vertexIndex+(width+1));

		vec3 normal = normalize(cross(v2 - v1, v1 - v0));

		setNormal(vertexIndex, normal);
		return;
	}
	//Bottom Right corner
	if(x == uint(width) && z == 0) {
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex + (width+1));
		vec3 v2 = getPos(vertexIndex - 1);
		vec3 v3 = getPos(vertexIndex - 1 + (width+1));

		vec3 normal1 = normalize(cross(v3 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v2 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//Top Left corner
	if(x == 0 && z == uint(height)){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex - (width+1));
		vec3 v2 = getPos(vertexIndex + 1);
		vec3 v3 = getPos(vertexIndex + 1 - (width+1));

		vec3 normal1 = normalize(cross(v3 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v2 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//Top Right corner
	if(x == uint(width)  && z == uint(height) ){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex - 1);
		vec3 v2 = getPos(vertexIndex - (width+1));

		vec3 normal = normalize(cross(v2 - v1, v1 - v0));

		setNormal(vertexIndex, normal);
		return;	
	}
	//Left edge
	if(x == 0){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex - (width+1));
		vec3 v2 = getPos(vertexIndex + 1 - (width+1));
		vec3 v3 = getPos(vertexIndex + 1);
		vec3 v4 = getPos(vertexIndex + (width+1));

		vec3 normal1 = normalize(cross(v2 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v3 - v2, v2 - v0));
		vec3 normal3 = normalize(cross(v4 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2 + normal3);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//Right edge
	if(x == uint(width) ){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex + height);
		vec3 v2 = getPos(vertexIndex - 1 + height);
		vec3 v3 = getPos(vertexIndex - 1);
		vec3 v4 = getPos(vertexIndex - (width+1));

		vec3 normal1 = normalize(cross(v2 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v3 - v2, v2 - v0));
		vec3 normal3 = normalize(cross(v4 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2 + normal3);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//Bottom edge
	if(z == 0){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex + 1);
		vec3 v2 = getPos(vertexIndex + (width+1));
		vec3 v3 = getPos(vertexIndex - 1 + (width+1));
		vec3 v4 = getPos(vertexIndex - 1);

		vec3 normal1 = normalize(cross(v2 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v3 - v2, v2 - v0));
		vec3 normal3 = normalize(cross(v4 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2 + normal3);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//Top edge
	if(z == uint(height)){
		vec3 v0 = getPos(vertexIndex);
		vec3 v1 = getPos(vertexIndex - 1);
		vec3 v2 = getPos(vertexIndex - (width+1));
		vec3 v3 = getPos(vertexIndex + 1 - (width+1));
		vec3 v4 = getPos(vertexIndex + 1);

		vec3 normal1 = normalize(cross(v2 - v1, v1 - v0));
		vec3 normal2 = normalize(cross(v3 - v2, v2 - v0));
		vec3 normal3 = normalize(cross(v4 - v3, v3 - v0));

		vec3 combinedNormal = normalize(normal1 + normal2 + normal3);

		setNormal(vertexIndex, combinedNormal);
		return;
	}
	//All other vertices

	vec3 v0 = getPos(vertexIndex);
	vec3 v1 = getPos(vertexIndex + (width+1));
	vec3 v2 = getPos(vertexIndex + 1);
	vec3 v3 = getPos(vertexIndex + 1 - (width+1));
	vec3 v4 = getPos(vertexIndex - (width+1));
	vec3 v5 = getPos(vertexIndex - 1);
	vec3 v6 = getPos(vertexIndex - 1 + (width+1));

	vec3 normal1 = normalize(cross(v1 - v0, v2 - v0));
	vec3 normal2 = normalize(cross(v2 - v3, v3 - v0));
	vec3 normal3 = normalize(cross(v3 - v4, v4 - v0));
	vec3 normal4 = normalize(cross(v4 - v5, v5 - v0));
	vec3 normal5 = normalize(cross(v5 - v6, v6 - v0));
	vec3 normal6 = normalize(cross(v6 - v1, v1 - v0));

	vec3 combinedNormal = normalize(normal1 + normal2 + normal3 + normal4 + normal5 + normal6);

	setNormal(vertexIndex, combinedNormal);
}