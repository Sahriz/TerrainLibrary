#version 430 core

#define screenWidth 1280.0
#define PI 3.1415



layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) buffer VertexBuffer {
    float positions[];
};

uniform int width;
uniform int height;
uniform float scale;
uniform float amplitude;
uniform float frequency;
uniform int octaves;
uniform float persistance;
uniform float lacunarity;

float rand(vec2 n) {
    return fract(sin(dot(n, vec2(127.1, 311.7))) * 43758.5453123);
}

float noise(vec2 p, float freq ){
	float unit = 1.0f / freq; //TODO: Fix so that uniform screenWidth = 1280 instead of hardcoded like now
	vec2 ij = floor(p/unit);
	vec2 xy = fract(p / unit);  // avoids mod instability
	//xy = 3.0f*xy*xy-2.0f*xy*xy*xy;
	xy = 0.5f*(1.0f-cos(PI*xy));
	float a = rand((ij+vec2(0.0f,0.0f)));
	float b = rand((ij+vec2(1.0f,0.0f)));
	float c = rand((ij+vec2(0.0f,1.0f)));
	float d = rand((ij+vec2(1.0f,1.0f)));
	float x1 = mix(a, b, xy.x);
	float x2 = mix(c, d, xy.x);
	return mix(x1, x2, xy.y);
}

float pNoise(vec2 p){
	float n = 0.0f;
	float normK = 0.0f;
	float f = frequency;
	float amp = 1.0f;
	for (int i = 0; i<octaves; i++){
		n+=amp*noise(p, f);
		f*=lacunarity;
		normK+=amp/amplitude;
		amp*=persistance;
	}
	float nf = n/normK;
	return nf*nf*nf*nf;
}

vec3 getPos(uint vertexIndex){
	uint startIndex = vertexIndex * 3;
	return vec3(positions[startIndex], positions[startIndex + 1], positions[startIndex + 2]);
}

void main(){

	uint x = gl_GlobalInvocationID.x;
    uint z = gl_GlobalInvocationID.y;

	 // Guard against overflow
    if (x >= uint(width+1) || z >= uint(height+1)) return;


	int vertexIndex = int(z * (width+1) + x); // new flat index
	vec3 pos = getPos(vertexIndex);
	vec2 vertexPlanePosition = pos.xz;
	
	float noiseValue = pNoise(vertexPlanePosition * scale);
	
	positions[vertexIndex * 3 + 1] = 20*noiseValue;
}