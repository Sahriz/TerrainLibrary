#version 430 core

#define screenWidth 1280
#define PI 3.1415

layout(std430, binding = 0) buffer VertexBuffer {
    float positions[];
};

layout(local_size_x = 64) in;


float rand(vec2 c){
	return fract(sin(dot(c.xy ,vec2(12.9898f,78.233f))) * 43758.5453f);
}

float noise(vec2 p, float freq ){
	float unit = 1280.0 / freq; //TODO: Fix so that uniform screenWidth = 1280 instead of hardcoded like now
	vec2 ij = floor(p/unit);
	vec2 xy = mod(p,unit)/unit;
	//xy = 3.0f*xy*xy-2.0f*xy*xy*xy;
	xy = 0.5f*(1.0f-cos(PI*xy));
	float a = rand((ij+vec2(0.0f,0.0f)));
	float b = rand((ij+vec2(1.0f,0.0f)));
	float c = rand((ij+vec2(0.0f,1.0f)));
	float d = rand((ij+vec2(1.0f,1.0f)));
	float x1 = mix(a, b, xy.x);
	float x2 = mix(c, d, xy.x);
	return mix(x1, x2, xy.y);
}

float pNoise(vec2 p, int res){
	float persistance = 0.5f;
	float n = 0.0f;
	float normK = 0.0f;
	float f = 4.0f;
	float amp = 1.0f;
	int iCount = 0;
	for (int i = 0; i<50; i++){
		n+=amp*noise(p, f);
		f*=2.0f;
		normK+=amp;
		amp*=persistance;
		if (iCount == res) break;
		iCount++;
	}
	float nf = n/normK;
	return nf*nf*nf*nf;
}

void main(){

	uint id = gl_GlobalInvocationID.x;
	if(id*3 >= positions.length()) return;

	uint base = id * 3;
	vec3 pos = vec3(positions[base + 0], positions[base + 1], positions[base + 2]);
	vec2 posPlane = pos.xz;

	float noiseValue = pNoise(posPlane * 25.0f, 5);
	pos.y = noiseValue;

	
	positions[base + 1] = 10*pos.y;
	
}