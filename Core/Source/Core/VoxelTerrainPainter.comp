#version 430 core

// Compute shader - one thread per cube
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer blockBuffer{
	int blockIDs[];
};


uniform int width;
uniform int height;
uniform int depth;

bool IsSolid(int x, int y, int z)
{
	int index = x + y * (width) + z * (width) * (height);
    return blockIDs[index] >= 0;
}

void main(){
	
	uint xPos = gl_GlobalInvocationID.x;
	uint yPos = gl_GlobalInvocationID.y;
	uint zPos = gl_GlobalInvocationID.z;

	if(xPos >= uint(width) || yPos >= uint(height) || zPos >= uint(depth)) return;
	
	int x = int(xPos);
	int y = int(yPos);
	int z = int(zPos);

	

	if(!IsSolid(x,y,z)) return;

	if(!IsSolid(x,y + 1, z)) return;

	int index = x + y * (width) + z * (width) * (height);
	for(int i = 1; i < 5; i++){
		if(!IsSolid(x,y+i,z)){blockIDs[index] = 2; return;}
	}
	
	blockIDs[index] = 3;
}