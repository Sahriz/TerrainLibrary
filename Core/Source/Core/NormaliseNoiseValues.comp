#version 430 core

// Compute shader - one thread per cube
layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer noiseBuffer{
	float noiseMap[];
};

layout(std430, binding = 1) buffer maxValueBuffer{
	float maxValue;
};

layout(std430, binding = 2) buffer minValueBuffer{
	float minValue;
};

uniform int width;
uniform int height;
uniform int depth;

void main(){
	
	uint xPos = gl_GlobalInvocationID.x;
	uint yPos = gl_GlobalInvocationID.y;
	uint zPos = gl_GlobalInvocationID.z;

	if(xPos >= uint(width) || yPos >= uint(height) || zPos >= uint(depth)) return;

	int index = int(xPos) + int(yPos) * width + int(zPos) * width * height;
	
	float noiseValue = noiseMap[index];
	float normalizedValue = (noiseValue - minValue)/(maxValue - minValue);
	float stretchedNormalizedValue = 2.0f*normalizedValue - 1.0f;

	noiseMap[index] = stretchedNormalizedValue;
}