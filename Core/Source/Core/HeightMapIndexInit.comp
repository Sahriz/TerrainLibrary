#version 430 core

layout(local_size_x = 16, local_size_y = 16) in;

layout(std430, binding = 0) buffer indexBuffer{
	int indices[];
};

uniform int width;
uniform int height;


int getIndex(uint x, uint z){
	return int(x + z * (width+1));
}

void main(){
	uint x = gl_GlobalInvocationID.x;
    uint z = gl_GlobalInvocationID.y;

    // Guard against overflow
    if (x >= uint(width) || z >= uint(height)) return;

	int v0 = getIndex(x,z);
	int v1 = getIndex(x+1,z);
	int v2 = getIndex(x,z+1);
	int v3 = getIndex(x+1,z+1);

	// One quad (two triangles) per invocation
    int vertexIndex = int(z * width + x); // new flat index
    int base = vertexIndex * 6;
	
	//Triangle 1
	indices[base + 0] = v0;
	indices[base + 1] = v2;
	indices[base + 2] = v1;

	//Triangle 2
	indices[base + 3] = v1;
	indices[base + 4] = v2;
	indices[base + 5] = v3;
}