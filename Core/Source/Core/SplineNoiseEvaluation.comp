#version 430 core

layout(local_size_x = 8, local_size_y = 8, local_size_z = 8) in;

layout(std430, binding = 0) buffer NoiseBuffer{
	float noiseMap[];
};
layout(std430, binding = 1) buffer SplineBuffer{
	vec2 splinePoints[];
};

uniform int width; 
uniform int height;
uniform int depth;
uniform int splinePointsCount;


float sampleCurve(float noiseValue) {
    if (noiseValue <= splinePoints[0].x)
        return splinePoints[0].y;

    uint last = uint(splinePointsCount - 1);
    if (noiseValue >= splinePoints[last].x)
        return splinePoints[last].y;

    for (uint i = 0; i < last; i++) {
        if (noiseValue >= splinePoints[i].x && noiseValue < splinePoints[i+1].x) {
            float t = (noiseValue - splinePoints[i].x) /
                      (splinePoints[i+1].x - splinePoints[i].x);
            return mix(splinePoints[i].y, splinePoints[i+1].y, t);
        }
    }
    return splinePoints[last].y;
}

void main(){
	uint xPos = gl_GlobalInvocationID.x;
	uint yPos = gl_GlobalInvocationID.y;
	uint zPos = gl_GlobalInvocationID.z;

	if(xPos >= uint(width) || yPos >= uint(height) || zPos >= uint(depth)) return;

	uint index = xPos + yPos * uint(width) + zPos * uint(width) * uint(height);
	float noiseValue = noiseMap[index];
    noiseValue = sampleCurve(noiseValue);
    noiseMap[index] = noiseValue;
}